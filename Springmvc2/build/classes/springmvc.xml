<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- 扫描有注解的包 -->
	<context:component-scan
		base-package="com.alex.handler"></context:component-scan>
	<!-- 配置视图解析器(InternalResourceViewResolver) -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/view/">
		</property>
		<property name="suffix" value=".jsp"></property>

	</bean>
	<!-- 加载国际化资源文件 1.将ResourceBundleMessageSource在程序加载时，加入springmvc:springmvc在启动时，会自动寻找id为messageSource的bean文件 
		2.如果配置了ResourceBundleMessageSource，则该类会在程序响应时介入 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n"></property>


	</bean>
	<!-- 这个注解可以实现index.jsp 到 success.jsp的跳转而不用经过中间的controller，
	而且这里的view-name也使用了视图解析器加入了前后缀，但是加入了以上注解之后，
	其他的页面请求都会来下面的注解（<mvc:view-controller）这里寻找映射地址
	而忽略controller@RequestMapping的注解地址，导致其他请求报404，所以需要添加
	<mvc:annotation-driven></mvc:annotation-driven>去调配，使得两者可以共存，
	很多注解功能都需要加入这个注解去保持功能的平衡，这是springmvc的基础配置
	
	 -->
	<mvc:view-controller path="SpringMVC/testmvcviewcontroller" view-name="success"/>
	<mvc:annotation-driven></mvc:annotation-driven>
	<!-- 如果想要使用静态资源时，由于web.xml配置了拦截所有请求并交给springmvc处理，所以
	转入controller之后发现requestMapping中没有对应的映射文件所以会报404，因此，在处理静态资源时能够直接访问，需要配置两个注解
	<mvc:annotation-driven></mvc:annotation-driven>
	和<mvc:default-servlet-handler/>这样大的话，处理静态资源时直接交给Tomcat的sevlet去处理。
	
	 -->
	<mvc:default-servlet-handler/>
	<!-- 1将 自定义转换器 纳入SpringIOC容器 -->
	
	<bean id="myConverter" class="com.alex.converter.MyConverter"></bean>
	<!-- 2将myConverter再纳入 SpringMVC提供的转换器Bean 
	<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
	<property name="converters">
		<set>
			<ref bean="myConverter"/>
			
		</set>
	
	</property>
	
	</bean>-->
	<!-- 3将conversionService注册到annotation-driven中 -->
	<mvc:annotation-driven ></mvc:annotation-driven>
	
	<!-- 配置数据格式化
	可以不配置ConversionServiceFactoryBean
	
	因为FormattingConversionServiceFactoryBean既可以实现类型转换，也可以实现数据格式化。
	
-->
	
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	<property name="converters">
		<set>
			<ref bean="myConverter"/>
			
		</set>
	
	</property>
	
	</bean>	
	
	
	<!-- 配置文件上传的实现类，加入到springioc容器中 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="defaultEncoding" value="UTF-8"></property>
			<!-- 上传单个文件的最大值，单位Byte;如果-1，表示无限制 -->
			<property name="maxUploadSize"  value="1024000000"></property>
	</bean>
	<!-- 没有说明拦截那些请求的话，默认拦截所有请求 -->
	<mvc:interceptors>
	
	<mvc:interceptor>
	
	<!-- 指定拦截的路径 -->
	<mvc:mapping path="/**"/>
	<!-- 指定不拦截的路径 -->
	<mvc:exclude-mapping path="/SpringMVC/testUpload"/>
	
	
	<bean id="MyInterceptor" class="com.alex.Interceptor.MyInterceptor"></bean>
	</mvc:interceptor>
	
	<!-- 第二个拦截器 -->
	<mvc:interceptor>
	
	<!-- 指定拦截的路径 -->
	<mvc:mapping path="/**"/>
	<!-- 指定不拦截的路径 -->
	<mvc:exclude-mapping path="/SpringMVC/testUpload"/>
	
	
	<bean id="MySecondInterceptor" class="com.alex.Interceptor.MySecondInterceptor"></bean>
	</mvc:interceptor>
	
	
	
	</mvc:interceptors>
</beans>